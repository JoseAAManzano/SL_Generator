# -*- coding: utf-8 -*-
"""
Version 1.0

Python script to generate SL word experiments by feeding list of words

Created on Tue Jan 29 18:16:53 2019

@author: JoseAAManzano
"""
import pykov
import itertools
import os
import sys

def produce_sentence(chain, steps=100):
    """
    Concatenates steps generated by pykov chain
    Arguments:
        chain -- pykov Chain
        steps -- how many steps to run through the chain? Default 100
    Returns:
        concatenated string
    """
    sentence = np.array(chain.walk(steps)).transpose()
    return sentence

def print_sentence_mbrola(sentence, wordlist=None, pitch = 83.62, addPause=False, pause = 25, vowelDur = 150, consDur = 100):
    """
    Produces list that can be directly copied to Mbroli to save audio string
    Arguments:
        sentence -- long string with words for the experiment
        wordlist -- list of words to count inside the string
        pitch -- add pitch modulation based on Mbroli, default constant 83.62
        addPause -- add pause between words?
        pause -- time for pauses between words (in ms)
        vowelDur -- duration of vowels in stream (in ms)
        consDur -- duration of consonants in stream (in ms)
    """
    def count_words(sentence, wordlist):
        """
        Private method to count words in the sentence and print the count
        """
        for word in wordlist:
            print(word,sentence.count(word))

    ret = ""
    for line in sentence:
        for ch in line:
            if ch in 'aiueo':
                ret += ch.lower() + " {} 0 {}\n".format(vowelDur, pitch)
            else:
                ret += ch.lower() + " {} 0 {}\n".format(consDur, pitch)
        if addPause:
            ret += "_ {}\n".format(pause)

    if(len(wordlist) > 1):
        count_words("".join(line for line in sentence), wordlist)

    return ret

def gen_ms_list(list, filepath, probs, isFrame=False):
    """
    Generates list to feed pykov.readmat() method
    Arguments:
        list -- list of words in the experiment
        name -- name of the file
        prob -- string of probability between words (e.g., "0.25")
        isFrame -- is it a rule-learning experiment?
    Returns:
        .txt file with words and probability between them
    """
    with open(filepath,'w') as file:
        for subset in itertools.permutations(list,2):
            if(isFrame):
                if(subset[0][:2] == subset[1][:2]):
                    continue
            file.write("{} {} {}\n".format(subset[0],subset[1],probs))


def create_files(word_list, reps, out_f):
    prob_between = round(1/(len(word_list)-1), 3)
    num_reps = len(word_list) * reps
    gen_ms_list(word_list, out_f, prob_between)
    markov_chain = pykov.Chain(pykov.readmat(out_f))
    sentence = produce_sentence(markov_chain, num_reps)
    mbroli_sen = print_sentence_mbrola(sentence, word_lit)

if __name__ == '__main__':
    if len(sys.argv) != 4:
        print('Usage: python sl_exp_gen.py <python list of words> <reps per word> <output_file>')
        print("Example: python sl_exp_gen.py ['bigoku','tadupa','datima','miteno','tobelu','bukoni','demuka','motufi'] 80 exp1.txt")
        sys.exit(1)
    word_list = sys.argv[1]
    reps = int(sys.argv[2])
    out_f = sys.argv[3]
    create_files(word_list, reps, out_f)
